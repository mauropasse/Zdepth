<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>memset@plt (37 samples, 0.09%)</title><rect x="677.7" y="149" width="1.1" height="15.0" fill="rgb(244,142,41)" rx="2" ry="2" />
<text  x="680.73" y="159.5" ></text>
</g>
<g >
<title>zdepth::DequantizeDepthImage (6,462 samples, 16.06%)</title><rect x="684.3" y="165" width="189.5" height="15.0" fill="rgb(249,48,45)" rx="2" ry="2" />
<text  x="687.32" y="175.5" >zdepth::DequantizeDepthI..</text>
</g>
<g >
<title>x86_pmu_enable (6 samples, 0.01%)</title><rect x="10.0" y="101" width="0.2" height="15.0" fill="rgb(237,10,51)" rx="2" ry="2" />
<text  x="13.00" y="111.5" ></text>
</g>
<g >
<title>RVL_compress (35,169 samples, 87.40%)</title><rect x="158.5" y="181" width="1031.4" height="15.0" fill="rgb(244,84,16)" rx="2" ry="2" />
<text  x="161.53" y="191.5" >RVL_compress</text>
</g>
<g >
<title>apic_timer_interrupt (5 samples, 0.01%)</title><rect x="661.9" y="133" width="0.2" height="15.0" fill="rgb(241,219,51)" rx="2" ry="2" />
<text  x="664.95" y="143.5" ></text>
</g>
<g >
<title>__do_execve_file.isra.39 (6 samples, 0.01%)</title><rect x="10.0" y="197" width="0.2" height="15.0" fill="rgb(249,131,11)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>[zdepth_test] (2,355 samples, 5.85%)</title><rect x="11.0" y="245" width="69.1" height="15.0" fill="rgb(216,154,30)" rx="2" ry="2" />
<text  x="14.03" y="255.5" >[zdepth..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.01%)</title><rect x="10.0" y="245" width="0.2" height="15.0" fill="rgb(205,217,13)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (6 samples, 0.01%)</title><rect x="10.0" y="69" width="0.2" height="15.0" fill="rgb(229,135,46)" rx="2" ry="2" />
<text  x="13.00" y="79.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (5 samples, 0.01%)</title><rect x="10.9" y="229" width="0.1" height="15.0" fill="rgb(206,137,3)" rx="2" ry="2" />
<text  x="13.85" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (6 samples, 0.01%)</title><rect x="10.0" y="229" width="0.2" height="15.0" fill="rgb(205,92,15)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>?? (176 samples, 0.44%)</title><rect x="679.2" y="133" width="5.1" height="15.0" fill="rgb(219,190,8)" rx="2" ry="2" />
<text  x="682.16" y="143.5" ></text>
</g>
<g >
<title>setup_new_exec (6 samples, 0.01%)</title><rect x="10.0" y="149" width="0.2" height="15.0" fill="rgb(243,170,1)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>perf_event_exec (6 samples, 0.01%)</title><rect x="10.0" y="133" width="0.2" height="15.0" fill="rgb(221,223,36)" rx="2" ry="2" />
<text  x="13.00" y="143.5" ></text>
</g>
<g >
<title>DecompressRVL (21 samples, 0.05%)</title><rect x="10.2" y="229" width="0.6" height="15.0" fill="rgb(217,79,25)" rx="2" ry="2" />
<text  x="13.21" y="239.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (173 samples, 0.43%)</title><rect x="679.2" y="37" width="5.0" height="15.0" fill="rgb(252,27,7)" rx="2" ry="2" />
<text  x="682.16" y="47.5" ></text>
</g>
<g >
<title>zdepth::AzureKinectQuantizeDepth (2,672 samples, 6.64%)</title><rect x="80.1" y="229" width="78.4" height="15.0" fill="rgb(238,215,45)" rx="2" ry="2" />
<text  x="83.14" y="239.5" >zdepth::A..</text>
</g>
<g >
<title>perf (6 samples, 0.01%)</title><rect x="10.0" y="261" width="0.2" height="15.0" fill="rgb(233,227,26)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (6 samples, 0.01%)</title><rect x="10.0" y="85" width="0.2" height="15.0" fill="rgb(219,110,9)" rx="2" ry="2" />
<text  x="13.00" y="95.5" ></text>
</g>
<g >
<title>RVL_compress (177 samples, 0.44%)</title><rect x="679.1" y="165" width="5.2" height="15.0" fill="rgb(244,76,46)" rx="2" ry="2" />
<text  x="682.13" y="175.5" ></text>
</g>
<g >
<title>zdepth_test (40,233 samples, 99.99%)</title><rect x="10.2" y="261" width="1179.8" height="15.0" fill="rgb(239,19,5)" rx="2" ry="2" />
<text  x="13.18" y="271.5" >zdepth_test</text>
</g>
<g >
<title>__dso_handle (2,674 samples, 6.65%)</title><rect x="80.1" y="245" width="78.4" height="15.0" fill="rgb(244,97,29)" rx="2" ry="2" />
<text  x="83.09" y="255.5" >__dso_han..</text>
</g>
<g >
<title>__hrtimer_run_queues (4 samples, 0.01%)</title><rect x="661.9" y="85" width="0.2" height="15.0" fill="rgb(218,46,46)" rx="2" ry="2" />
<text  x="664.95" y="95.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (5 samples, 0.01%)</title><rect x="873.3" y="101" width="0.1" height="15.0" fill="rgb(206,48,20)" rx="2" ry="2" />
<text  x="876.29" y="111.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (5 samples, 0.01%)</title><rect x="873.3" y="117" width="0.1" height="15.0" fill="rgb(206,34,20)" rx="2" ry="2" />
<text  x="876.29" y="127.5" ></text>
</g>
<g >
<title>tick_sched_handle (4 samples, 0.01%)</title><rect x="873.3" y="53" width="0.1" height="15.0" fill="rgb(207,225,2)" rx="2" ry="2" />
<text  x="876.29" y="63.5" ></text>
</g>
<g >
<title>[unknown] (29 samples, 0.07%)</title><rect x="10.2" y="245" width="0.8" height="15.0" fill="rgb(216,70,17)" rx="2" ry="2" />
<text  x="13.18" y="255.5" ></text>
</g>
<g >
<title>CompressRVL (9,010 samples, 22.39%)</title><rect x="158.5" y="165" width="264.2" height="15.0" fill="rgb(231,116,27)" rx="2" ry="2" />
<text  x="161.53" y="175.5" >CompressRVL</text>
</g>
<g >
<title>hrtimer_interrupt (4 samples, 0.01%)</title><rect x="661.9" y="101" width="0.2" height="15.0" fill="rgb(236,177,5)" rx="2" ry="2" />
<text  x="664.95" y="111.5" ></text>
</g>
<g >
<title>zdepth::AzureKinectQuantizeDepth (17 samples, 0.04%)</title><rect x="1189.4" y="133" width="0.5" height="15.0" fill="rgb(213,80,17)" rx="2" ry="2" />
<text  x="1192.35" y="143.5" ></text>
</g>
<g >
<title>__libc_start_main (35,169 samples, 87.40%)</title><rect x="158.5" y="229" width="1031.4" height="15.0" fill="rgb(236,171,15)" rx="2" ry="2" />
<text  x="161.53" y="239.5" >__libc_start_main</text>
</g>
<g >
<title>zdepth::AzureKinectDequantizeDepth (11 samples, 0.03%)</title><rect x="873.5" y="133" width="0.3" height="15.0" fill="rgb(250,191,4)" rx="2" ry="2" />
<text  x="876.50" y="143.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (6 samples, 0.01%)</title><rect x="679.0" y="133" width="0.1" height="15.0" fill="rgb(214,126,2)" rx="2" ry="2" />
<text  x="681.96" y="143.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (5 samples, 0.01%)</title><rect x="661.9" y="117" width="0.2" height="15.0" fill="rgb(215,220,16)" rx="2" ry="2" />
<text  x="664.95" y="127.5" ></text>
</g>
<g >
<title>zdepth::DequantizeDepthImage (231 samples, 0.57%)</title><rect x="65.6" y="229" width="6.8" height="15.0" fill="rgb(229,30,0)" rx="2" ry="2" />
<text  x="68.63" y="239.5" ></text>
</g>
<g >
<title>zdepth::AzureKinectDequantizeDepth (1,861 samples, 4.62%)</title><rect x="11.1" y="229" width="54.5" height="15.0" fill="rgb(218,44,12)" rx="2" ry="2" />
<text  x="14.06" y="239.5" >zdept..</text>
</g>
<g >
<title>[[vdso]] (5 samples, 0.01%)</title><rect x="679.0" y="117" width="0.1" height="15.0" fill="rgb(219,105,54)" rx="2" ry="2" />
<text  x="681.99" y="127.5" ></text>
</g>
<g >
<title>tick_sched_timer (4 samples, 0.01%)</title><rect x="873.3" y="69" width="0.1" height="15.0" fill="rgb(251,154,15)" rx="2" ry="2" />
<text  x="876.29" y="79.5" ></text>
</g>
<g >
<title>__x64_sys_execve (6 samples, 0.01%)</title><rect x="10.0" y="213" width="0.2" height="15.0" fill="rgb(218,30,31)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>?? (176 samples, 0.44%)</title><rect x="679.2" y="101" width="5.1" height="15.0" fill="rgb(250,167,8)" rx="2" ry="2" />
<text  x="682.16" y="111.5" ></text>
</g>
<g >
<title>__GI___clock_gettime (10 samples, 0.02%)</title><rect x="678.8" y="149" width="0.3" height="15.0" fill="rgb(223,169,4)" rx="2" ry="2" />
<text  x="681.84" y="159.5" ></text>
</g>
<g >
<title>zdepth::QuantizeDepthImage (10,777 samples, 26.78%)</title><rect x="873.8" y="165" width="316.1" height="15.0" fill="rgb(214,162,42)" rx="2" ry="2" />
<text  x="876.82" y="175.5" >zdepth::QuantizeDepthImage</text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (176 samples, 0.44%)</title><rect x="679.2" y="149" width="5.1" height="15.0" fill="rgb(225,224,7)" rx="2" ry="2" />
<text  x="682.16" y="159.5" ></text>
</g>
<g >
<title>_start (35,171 samples, 87.41%)</title><rect x="158.5" y="245" width="1031.4" height="15.0" fill="rgb(232,212,4)" rx="2" ry="2" />
<text  x="161.53" y="255.5" >_start</text>
</g>
<g >
<title>?? (176 samples, 0.44%)</title><rect x="679.2" y="117" width="5.1" height="15.0" fill="rgb(225,106,4)" rx="2" ry="2" />
<text  x="682.16" y="127.5" ></text>
</g>
<g >
<title>?? (176 samples, 0.44%)</title><rect x="679.2" y="69" width="5.1" height="15.0" fill="rgb(210,84,3)" rx="2" ry="2" />
<text  x="682.16" y="79.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (4 samples, 0.01%)</title><rect x="873.3" y="85" width="0.1" height="15.0" fill="rgb(234,34,4)" rx="2" ry="2" />
<text  x="876.29" y="95.5" ></text>
</g>
<g >
<title>zdepth::QuantizeDepthImage (262 samples, 0.65%)</title><rect x="72.4" y="229" width="7.7" height="15.0" fill="rgb(244,180,36)" rx="2" ry="2" />
<text  x="75.40" y="239.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (530 samples, 1.32%)</title><rect x="662.1" y="149" width="15.5" height="15.0" fill="rgb(210,45,48)" rx="2" ry="2" />
<text  x="665.10" y="159.5" ></text>
</g>
<g >
<title>?? (176 samples, 0.44%)</title><rect x="679.2" y="85" width="5.1" height="15.0" fill="rgb(217,24,37)" rx="2" ry="2" />
<text  x="682.16" y="95.5" ></text>
</g>
<g >
<title>DecodeVLE (4,376 samples, 10.88%)</title><rect x="533.8" y="149" width="128.3" height="15.0" fill="rgb(254,107,8)" rx="2" ry="2" />
<text  x="536.77" y="159.5" >DecodeVLE</text>
</g>
<g >
<title>TestImage (35,169 samples, 87.40%)</title><rect x="158.5" y="197" width="1031.4" height="15.0" fill="rgb(214,221,43)" rx="2" ry="2" />
<text  x="161.53" y="207.5" >TestImage</text>
</g>
<g >
<title>EncodeVLE (4,540 samples, 11.28%)</title><rect x="289.6" y="149" width="133.1" height="15.0" fill="rgb(244,69,34)" rx="2" ry="2" />
<text  x="292.58" y="159.5" >EncodeVLE</text>
</g>
<g >
<title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::_M_default_append (176 samples, 0.44%)</title><rect x="679.2" y="53" width="5.1" height="15.0" fill="rgb(240,22,18)" rx="2" ry="2" />
<text  x="682.16" y="63.5" ></text>
</g>
<g >
<title>zdepth::AzureKinectQuantizeDepth (8,629 samples, 21.44%)</title><rect x="936.8" y="149" width="253.1" height="15.0" fill="rgb(225,65,16)" rx="2" ry="2" />
<text  x="939.81" y="159.5" >zdepth::AzureKinectQuantizeDepth</text>
</g>
<g >
<title>zdepth::AzureKinectDequantizeDepth (4,542 samples, 11.29%)</title><rect x="740.6" y="149" width="133.2" height="15.0" fill="rgb(207,101,16)" rx="2" ry="2" />
<text  x="743.63" y="159.5" >zdepth::AzureKin..</text>
</g>
<g >
<title>DecompressRVL (8,733 samples, 21.70%)</title><rect x="422.7" y="165" width="256.1" height="15.0" fill="rgb(229,165,16)" rx="2" ry="2" />
<text  x="425.75" y="175.5" >DecompressRVL</text>
</g>
<g >
<title>search_binary_handler (6 samples, 0.01%)</title><rect x="10.0" y="181" width="0.2" height="15.0" fill="rgb(238,125,11)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (5 samples, 0.01%)</title><rect x="873.3" y="133" width="0.1" height="15.0" fill="rgb(234,27,34)" rx="2" ry="2" />
<text  x="876.29" y="143.5" ></text>
</g>
<g >
<title>update_process_times (4 samples, 0.01%)</title><rect x="873.3" y="37" width="0.1" height="15.0" fill="rgb(225,93,13)" rx="2" ry="2" />
<text  x="876.29" y="47.5" ></text>
</g>
<g >
<title>GetTimeUsec (10 samples, 0.02%)</title><rect x="678.8" y="165" width="0.3" height="15.0" fill="rgb(232,139,12)" rx="2" ry="2" />
<text  x="681.84" y="175.5" ></text>
</g>
<g >
<title>load_elf_binary (6 samples, 0.01%)</title><rect x="10.0" y="165" width="0.2" height="15.0" fill="rgb(253,118,40)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>all (40,239 samples, 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(234,148,26)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>main (35,169 samples, 87.40%)</title><rect x="158.5" y="213" width="1031.4" height="15.0" fill="rgb(218,105,42)" rx="2" ry="2" />
<text  x="161.53" y="223.5" >main</text>
</g>
<g >
<title>ctx_resched (6 samples, 0.01%)</title><rect x="10.0" y="117" width="0.2" height="15.0" fill="rgb(247,20,43)" rx="2" ry="2" />
<text  x="13.00" y="127.5" ></text>
</g>
<g >
<title>native_write_msr (6 samples, 0.01%)</title><rect x="10.0" y="53" width="0.2" height="15.0" fill="rgb(242,214,46)" rx="2" ry="2" />
<text  x="13.00" y="63.5" ></text>
</g>
</g>
</svg>
